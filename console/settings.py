# coding=utf-8
"""
Django settings for console project.

Generated by 'django-admin startproject' using Django 1.8.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import re
from collections import defaultdict
from django.conf import settings
from django.contrib import messages
from celery.schedules import crontab
from kombu import Exchange
from kombu import Queue

from config import load_config

config = load_config()

BASE_DIR = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))

LOGIN_URL = "/login"

ENV = config.get("other", "env")

HOST_NAME = config.get("other", "host_name")

VNC_ADDRESS = config.get("other", "vnc_address")

WALLET_ZONE = config.get("wallet", "wallet_zone")

# jumper_base
JUMPER_DISK_TYPE = config.get("jumper_default", "disk_type")
SERVICES_SUBNET_NAME = config.get("jumper_default", "service_net_name")

# waf server info
WAF_SMC_IP = config.get("waf_info", "waf_smc_ip")
WAF_SMC_PORT = config.get("waf_info", "waf_smc_port")
WAF_TOKEN_EXPIRATION = config.get("waf_info", "waf_token_expiration")
WAF_USER_NAME = config.get("waf_info", "user_name")
WAF_USER_PASSWORD = config.get("waf_info", "user_password")
WAF_HTTP_PROXY = config.get("waf_info", "http_proxy") if "http_proxy" in config.options("waf_info") else None

# KafkaMQ
KAFKA_MQ_HOST = config.get("mq_info", "mq_host")
KAFKA_MQ_DB_HOST = config.get("mq_info", "mq_db_host")
KAFKA_MQ_DB_PORT = config.get("mq_info", "mq_db_port")
KAFKA_MQ_DB_NAME = config.get("mq_info", "mq_bd_db")
KAFKA_MQ_DB_USER = config.get("mq_info", "mq_db_user")
KAFKA_MQ_DB_PASSWORD = config.get("mq_info", "mq_bd_pwd")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'iy^s_st)5znpha9ouep4e%x%e@*tjauz6n&e(#ftkgzeiz02io'
OPEN_REGISTER_KEY = config.get("open_register", "open_register_key")
OPEN_REGISTER_VALID_IPS = config.get("open_register", "open_register_valid_ips").split(",")
ALLOWED_LOGIN_ACCOUNT_CHANNEL = ["cloudin"]

# SUBACCOUNT
MAX_SUBACCOUNT_NUM = config.getint("devops", "max_subaccount_num")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.getboolean("other", "debug")

USE_POWERVM_HMC = config.getboolean("POWERVM_instance", "use_hmc")

# RAVEN_CONFIG = {
#     'dsn': None
# }
# if not DEBUG:
#     RAVEN_CONFIG['dsn'] = config.get("sentry", "dsn")

ALLOWED_HOSTS = config.get("other", "allowed_hosts").split(",")

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')

APPEND_SLASH = False

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "console.common.middlewares.ErrorMessageHandler",
    "console.common.middlewares.RedirectToNoSlash",
    "console.common.middlewares.RESTMiddleware",
    "log_request_id.middleware.RequestIDMiddleware"
)

ROOT_URLCONF = 'console.urls'

MESSAGE_TAGS = {
    messages.ERROR: 'danger'
}

ADMIN_APP = os.path.join(BASE_DIR, 'console', 'admin_')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(ADMIN_APP, 'statics')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'console.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.%s' % config.get("database", "db_engine"),
        'NAME': config.get("database", "db_name"),
        'USER': config.get("database", "db_user"),
        'PASSWORD': config.get("database", "db_password"),
        'HOST': config.get("database", "db_host"),
        'PORT': config.getint("database", "db_port")
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = config.get("i18n", "code")

TIME_ZONE = config.get("i18n", "timezone")

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGES = {
    "zh-hans": "Chinese",
    "en-us": "English",
    "zh-hant": "Chinese Traditional"
}

SESSION_COOKIE_AGE = 1209600  # Session Cookie有效时间

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "statics"),
    os.path.join(BASE_DIR, "console/admin_/statics")
)

STATIC_ROOT = config.get("statics", "static_root")

MEDIA_URL = '/media/'

MEDIA_ROOT = config.get("statics", "media_root")

# FILE_UPLOAD_HANDLERS = []
FILE_UPLOAD_MAX_MEMORY_SIZE = 10240
# FILE_UPLOAD_TEMP_DIR =

# 子账号用户名过滤关键词
SUBACCOUNT_USERNAME_FILTER = [
    "Admin",
    "Normal",
    "Root",
    "Administrator",
    "Ubuntu",
    "Mysql",
    "Daemon",
    "Bin",
    "Sys",
    "Man",
    "Backup",
    "Nobody",
    "Anonymous",
    "Syslog",
    "Sshd",
    "Ntp"
]

# 多语言文件目录 #

LOCALE_PATH = os.path.join(
    BASE_DIR, "locale"
)

# ---------------------------------------------------------------------------- #

if DEBUG:
    REST_FRAMEWORK_RENDERERS = (
        'console.common.utils.UnicodeJSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer'
    )
else:
    REST_FRAMEWORK_RENDERERS = (
        'console.common.utils.UnicodeJSONRenderer',
    )

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_RENDERER_CLASSES': REST_FRAMEWORK_RENDERERS
}

# ---------------------------------------------------------------------------- #

DEFAULT_PAGE = 1
MAX_PAGE_SIZE = 100
DEFAULT_PAGE_SIZE = 10
MAX_PAGE_NUM = 1000

# NAMED_RULE #

DISK_PREFIX = "d"
INSTANCE_PREFIX = "i"
BACKUP_PREFIX = "bak"
IMG_PREFIX = "img"
KEYPAIR_PREFIX = "kp"
IMAGE_PREFIX = "img"
NET_PREFIX = "net"
BASE_NET_PREFIX = "b-net"
NETWORK_PREFIX = "network"
BASE_NETWORK_PREFIX = "b-network"
IP_PREFIX = "ip"
ROUTER_PREFIX = "rtr"
SECURITY_PREFIX = "sg"
SECURITY_RULE_PREFIX = "sgr"
TICKET_PREFIX = "t"
USER_PREFIX = "usr"
ADMIN_USER_PREFIX = 'ci'
GROUP_PREFIX = 'ty'
QUOTA_PREFIX = "q"
NOTIFY_GROUP_PREFIX = "nfg"
NOTIFY_MEMBER_PREFIX = "nfm"
ALARM_STRATEGY_PREFIX = "alm"
ALARM_RULE_PREFIX = "alru"
ALARM_NOTIFY_METHOD_PREFIX = "anm"
NAME_ID_LENGTH = 8
RDS_SECURITY_PREFIX = "rsg"
RDS_SECURITY_RULE_PREFIX = "rsgr"
RDS_PREFIX = "rds"
RDS_BACKUP_PREFIX = "rdbk"
RDS_CONFIG_PREFIX = "rdcf"
RDS_DB_VERSION_PREFIX = "rdbv"
# RDS_FLAVOR_PREFIX = "rdfv"
RDS_GROUP_PREFIX = "rdg"
LB_PREFIX = "lb"
LBL_PREFIX = "lbl"
LBP_PREFIX = "lbp"
LBHM_PREFIX = "lbhm"
LBM_PREFIX = "lbm"

# API #

API_BASE_MAP = dict(config.items("zone_map"))

DEFAULT_ZONE = "bj"

DEFAULT_API_BASE = API_BASE_MAP["yz"]

API_VERSION = config.get("api", "api_version")

# 计费相关配置 #

BILLING_RESOURCE_PREFIX = [DISK_PREFIX, INSTANCE_PREFIX, IP_PREFIX]

# ---------------------------------------------------------------------------- #

RECORD_DATE_FORMAT = "%Y-%m-%d"  # 日志日期格式

VALID_DATETIME_FORMAT = "%Y-%m-%d %H:%M:%S"  # 统一日期时间格式

# ---------------------------------------------------------------------------- #

MESSAGE_CENTER_API_KEY = config.get("message_center", "api_key")
MESSAGE_CENTER_SMS_API = config.get("message_center", "sms_api")
MESSAGE_CENTER_EMAIL_API = config.get("message_center", "email_api")

CODE_LENGTH = {
    "dynamic_code": config.getint("code", "dynamic_code_length"),
    "verify_code": config.getint("code", "verify_code_length")
}

CODE_SEND_INTERVAL = config.getint("code", "send_interval")  # 手机验证码发送间隔
CODE_EXPIRE_SECONDS = config.getint("code", "expire_seconds")

REGISTER_ID_EXPIRE = config.getint("register", "id_expire")  # 注册激活id的时效时间
REGISTER_ID_CLEAN_DELAY = config.getint("register", "id_clean_delay")  # 注册激活ID在时效后多长时间清理掉

ACCOUNT_GID_EFFECT_TIMEDELTA = 7 * 24 * 3600  # Seconds

# 激活邮件，重置密码邮件发送时间间隔
EMAIL_SEND_INTERVAL = 60  # seconds

# 工单处理人员列表
TICKET_SEND_TO = config.get("other", "ticket_send_to")

CLOUDIN_EMAIL_FROM = config.get("register", 'email_from')
# ---------------------------------------------------------------------------- #

if config.get("memcache", "cache_type") == "localmem":
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "console",
            "MAX_ENTRIES": 1000
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
            'LOCATION': map(lambda x: x + ":" + config.get('memcache', 'port'),
                            config.get("memcache", "host").split(", ")),
            "MAX_ENTRIES": 1000
        }
    }

PAGE_CACHE_TIMEOUT = config.getint("memcache", "page_cache_timeout")

# STATICFILES_STORAGE = "django.contrib.staticfiles.storage.CachedStaticFilesStorage"

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# CAPTCHA SETTINGS #

CAPTCHA_LENGTH = 4  # 图片验证码字母个数
CAPTCHA_BACKGROUND_COLOR = "#F9F9F9"  # 图片验证码背景颜色
# CAPTCHA_BACKGROUND_COLOR = "transparent"    # 图片验证码背景颜色
CAPTCHA_FOREGROUND_COLOR = "#00b3ea"  # 图片验证码前景颜色
# CAPTCHA_FOREGROUND_COLOR = "#0CF5F5"    # 图片验证码前景颜色
CAPTCHA_FONT_SIZE = 22  # 图片验证码字体大小
CAPTCHA_TIMEOUT = 10  # 单位：分钟，图片验证码失效时间
# CAPTCHA_NOISE_FUNCTIONS = ('captcha.helpers.noise_arcs',)
# CAPTCHA_NOISE_FUNCTIONS = ('captcha.helpers.noise_dots',)
CAPTCHA_NOISE_FUNCTIONS = ()
# CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.math_challenge'
# CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.word_challenge'
CAPTCHA_DICTIONARY_MIN_LENGTH = 4
CAPTCHA_DICTIONARY_MAX_LENGTH = 6

# ---------------------------------------------------------------------------- #

# SIGNATURE SETTINGS START #
SIGNATURE_SECRET_KEY = dict(config.items("secret_key_map"))
SIGNATURE_METHOD = SIGNATURE_SECRET_KEY.get("method", "sha256")
# SIGNATURE SETTINGS END #

# REDIS SETTINGS #
# REDIS_HOST = "192.168.100.12"
REDIS_HOST = config.get("redis", "host")
REDIS_PORT = config.getint("redis", "port")
REDIS_PASSWORD = config.get("redis", "password")

REDIS_DB_QUOTA_MONITOR = config.getint("redis", "db_quota_monitor")
REDIS_DB_BILLING_MONITOR = config.getint("redis", "db_billing_monitor")
REDIS_DB_WALLET_MONITOR = config.getint("redis", "db_wallet_monitor")
REDIS_DB_KEYPAIR = config.getint("redis", "db_keypair")
REDIS_DB_CELERY = config.getint("redis", "db_celery")
REDIS_DB_CELERY_BACKEND = config.getint("redis", "db_celery_backend")
REDIS_DB_RESOURCE = config.getint("redis", "db_resource_info")
BILLING_MONITOR_KEY = config.get("redis", "monitor_key")
REDIS_DB_ACCOUNT = config.getint("redis", "db_account")
REDIS_DB_NOTIFY = config.getint("redis", "db_notify")

# RABBITMQ SETTINGS #
MQ_HOST = config.get("mq", "host")
MQ_PORT = config.getint("mq", "port")
MQ_USERNAME = config.get("mq", "username")
MQ_PASSWORD = config.get("mq", "password")

# Celery Setting #

# BROKER_URL = 'redis://:%s@%s:%s/%s' % (REDIS_PASSWORD, REDIS_HOST, REDIS_PORT, REDIS_DB)

if config.get("celery", "broker") == "redis":
    BROKER_URL = 'redis://:%s@%s:%s/%s' % (REDIS_PASSWORD, REDIS_HOST, REDIS_PORT, REDIS_DB_CELERY)
else:
    BROKER_URL = 'amqp://%s:%s@%s:%d//' % (MQ_USERNAME, MQ_PASSWORD, MQ_HOST, MQ_PORT)

CELERY_SEND_EVENTS = config.getboolean("celery", "event")

# BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 1800,  # 0.5 hour.
#                             'fanout_prefix': True}
if config.get("celery", "broker") == "redis":
    CELERY_RESULT_BACKEND = 'redis://%s:%s/%s' % (REDIS_HOST, REDIS_PORT, REDIS_DB_CELERY_BACKEND)
else:
    CELERY_RESULT_BACKEND = "amqp://%s:%s@%s:%d//" % (MQ_USERNAME, MQ_PASSWORD, MQ_HOST, MQ_PORT)

if not config.getboolean("celery", "result"):
    del CELERY_RESULT_BACKEND

CELERY_TASK_SERIALIZER = "json"

# Result serialization format. Default is pickle.
CELERY_RESULT_SERIALIZER = "json"

# A white list of content-types/serializers to allow.
# If a message is received that is not in this list then the
# message will be discarded with an error.
CELERY_ACCEPT_CONTENT = ["json"]

# Configure Celery to use a custom time zones. The timezone value
# can be any time zones supported by the pytz library.
CELERY_TIMEZONE = config.get("celery", "timezone")

# If enabled dates and times in messages will be converted to use the UTC timezone.
CELERY_ENABLE_UTC = config.getboolean("celery", "enable_utc")

CELERYBEAT_SCHEDULE = {
    'report_collect_data': {
        'task': 'console.finance.report.tasks.collect_data',
        'schedule': crontab(minute="5", hour="16"),  # 北京时间每天24:05
    },
}

CELERY_DEFAULT_QUEUE = 'console'

CELERY_QUEUES = (
    Queue('console', Exchange('console'), routing_key='console'),
)

# CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'

# 登录错误几次以上，需要输入验证码

LOGIN_MAX_TRIES = 50

# 前端显示 Zone 列表
ZONE_LIST = config.get("other", "zone_list").split(",")

# osapi 默认超时时间
API_DEFAULT_TIMEOUT = 60
API_TIMEOUT = {
    "ChangeInstancePassword": 60,
    "ListNetworks": 60,
    "Consumption": 60,
    "DetachDisk": 60,
    "CreateDiskSnapshot": 60,
    "PriceQuery": 60,
    "RevertResize": 60,
    "DeleteMeterLabelRule": 60,
    "ClearGateWay": 60,
    "UpdateSecurityGroup": 60,
    "ListQosRules": 60,
    "DescribeIP": 60,
    "UpdateInstanceName": 60,
    "AllocateIP": 60,
    "UnBindIP": 60,
    "ResourceCreate": 60,
    "RebuildInstance": 60,
    "GetVNC": 60,
    "CreateDiskBackup": 60,
    "LeaveRouter": 60,
    "ResourceClose": 60,
    "DescribeImage": 60,
    "DeleteSecurityGroupDefaultRule": 60,
    "ChangeInstanceDiskIOTune": 60,
    "RestoreDiskBackup": 60,
    "Recharge": 60,
    "SnapshotInstance": 60,
    "CreateQosRule": 60,
    "DeleteFlavor": 60,
    "DeleteKeypair": 60,
    "AttachKeyPairs": 60,
    "CreateSubNet": 60,
    "BackupInstance": 60,
    "ResourceOpen": 60,
    "CreateInstance": 60,
    "Settle": 60,
    "RebootInstance": 60,
    "DescribeRouter": 60,
    "RemoveSecurityGroup": 60,
    "CreateDisk": 60,
    "DeleteSubNet": 30,
    "ResourceDelete": 60,
    "DescribeSecurityGroupResource": 60,
    "ModifyNet": 30,
    "ceilometer": 60,
    "ReleaseIP": 60,
    "ResizeInstance": 60,
    "RechargeRecords": 60,
    "DescribeNets": 60,
    "DescribeDiskSnapshot": 60,
    "ShowQosRule": 60,
    "DescribeSecurityGroup": 60,
    "JoinRouter": 60,
    "DeleteInstance": 60,
    "DeleteQosRule": 60,
    "GrantSecurityGroup": 60,
    "CreateKeyPair": 60,
    "LeaveNet": 30,
    "ResourceDescribe": 60,
    "StartInstance": 60,
    "CreateNetwork": 30,
    "ConfirmResize": 60,
    "DeleteRouter": 60,
    "AttachDisk": 60,
    "CreateSecurityGroup": 60,
    "Balance": 60,
    "DeleteDisk": 60,
    "JoinNet": 60,
    "DescribeKeyPairs": 60,
    "DeleteDiskSnapshot": 60,
    "PatternQuery": 60,
    "CostPredict": 60,
    "ResizeDisk": 60,
    "DetachKeyPairs": 60,
    "DescribeDiskBackup": 60,
    "DeleteNetwork": 30,
    "CreateMeterLabelRule": 60,
    "BindIP": 60,
    "ResourceResize": 60,
    "SetGateWay": 60,
    "CreateSecurityGroupDefaultRule": 60,
    "ShutdownInstance": 60,
    "UpdateQosRule": 60,
    "DescribeDisks": 60,
    "DeleteSecurityGroup": 60,
    "FlowQuery": 60,
    "DescribeFlavors": 60,
    "DescribeInstance": 60,
    "DescribePorts": 60,
    "CreateRouter": 60,
    "DescribeNetInstances": 30,
    "DescribeSecurityGroupByInstance": 60,
    "DescribeKeyPairsResource": 60,
    "CreateFlavor": 60,
    "DeleteImage": 60,
    "DeleteDiskBackup": 60,
    "alarmCreateUgroup": 60,
    "alarmDelUgroup": 60,
    "alarmCreateUser": 60,
    "alarmDelUser": 60,
    "alarmCreateRule": 15,
    "DescribeAllComputePools": 60,
    "VolumeTypeCreate": 30,
    "VolumeTypeAdjust": 30,
    "VolumeTypeDelete": 30,
}

# EMAIL SETTINGS
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = config.get("email", "host")
EMAIL_PORT = config.getint("email", "port")
EMAIL_HOST_USER = config.get("email", "user")
EMAIL_HOST_PASSWORD = config.get("email", "password")
EMAIL_DEFAULT_FROM = config.get("email", "default_from")
EMAIL_USE_SSL = config.getboolean("email", "use_ssl")

# ZABBIX API SETTINGS

API_URL = config.get("zabbix", "api_url")
API_KEY = config.get("zabbix", "api_key")

# resource

RESOURCES = [
    'disk_num',
    'disk_sata_cap',
    'disk_ssd_cap',
    'memory',
    'cpu',
    'instance',
    'bandwidth',
    'pub_nets',
    'pri_nets',
    'keypair',
    'router',
    'pub_ip',
    'security_group',
    'backup',
]

RESOURCES_MAP = {
    resource_name: config.getint('resource', resource_name)
    for resource_name in RESOURCES
}

TOTAL_RESOURCES_MAP = {
    resource_name: config.getint('total_resource', resource_name)
    for resource_name in RESOURCES
}

# path about

# 图片存储路径
IMAGE_UPLOAD_PATH = 'id_images'
MIRRORING_UPLOAD_PATH = '/cephfs/user_images'
# admin about

THUMBNAIL_SIZE = (60, 60)

# supersession about

ACCOUNT_CHANNEL = 'cloudin'

REQUEST_ID_RESPONSE_HEADER = "X-Console-Request-ID"

# Application definition

BASIC_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "rest_framework",
    'djcelery',
)

COMMON_APPS = (
    'console.common.account',
    'console.common.license',
    'console.common.department',
    'console.common.permission',
    'console.common.captcha',
    "console.common.notice",
    'console.common.zones',
    'console.common.ticket_engine',
)

BASIC_APPS += COMMON_APPS

INSTALLED_APPS = BASIC_APPS

if 'console' in settings.ENV:
    CONSOLE_APP = (
        "console.console",
        "console.console.disks",
        "console.console.quotas",
        "console.console.images",
        "console.console.records",
        "console.console.backups",
        "console.console.security",
        "console.console.ips",
        "console.console.keypairs",
        "console.console.routers",
        "console.console.nets",
        "console.console.instances",
        "console.console.alarms",
        "console.console.resources",
        "console.console.rds",
        "console.console.loadbalancer",
        "console.console.jumper",
        "console.console.monitors",
        "console.console.topology",
        "console.console.trash",
        "console.console.elastic",
        "console.console.docker",
    )

    INSTALLED_APPS += CONSOLE_APP

if "admin" in settings.ENV:
    ADMIN_APP = (
        "console.admin_",
        "console.admin_.admin_flavor",
        "console.admin_.admin_image",
        "console.admin_.admin_flavor",
        "console.admin_.admin_router",
        "console.admin_.admin_subnet",
        "console.admin_.admin_instance",
        "console.admin_.compute_pool",
        "console.admin_.ip_pool",
        "console.admin_.physic_machine",
        "console.admin_.platform",
        "console.admin_.storage_pool",
    )

    INSTALLED_APPS += ADMIN_APP
if "finance" in settings.ENV:
    FINANCE_APP = (
        'console.finance.cmdb',
        'console.finance.flow',
        'console.finance.monitor',
        'console.finance.screen',
        'console.finance.overview',
        'console.finance.tickets',
        'console.finance.board',
        'console.finance.safedog',
        'console.finance.waf',
        "console.finance.appstore",
        "console.finance.report",
    )

    INSTALLED_APPS += FINANCE_APP

if "portal" in settings.ENV:
    PORTAL_APPS = (
        # "console.admin_",  # license
        # "console.console",  # login/login.html
        "console.portal.portalorder",
        "console.portal.dashboard",
        "console.portal.root",
        # "console.portal.cmdb_",
    )
    INSTALLED_APPS = BASIC_APPS + PORTAL_APPS

# generate SERVICES from INSTALLED_APPS, so keep these code after INSTALLED_APPS register

INSTALLED_APPS = tuple(set(INSTALLED_APPS))
pattern = re.compile(r'^console\.([\w_]+)\.([\w_]+)')
SERVICES = []
for app in INSTALLED_APPS:
    match = pattern.search(app)
    if match:
        _, moudle = match.groups()
        SERVICES.append(moudle)

# Virtualizations
# {
#     'KVM': {
#         'disk': {
#             'availability_zone': ['nova'],
#             'type': ['vmdk', 'sata', 'lvm_pcie', 'vmware', 'lvm_ssd', 'lvm_sata', 'ssd']
#         }
#     },
#     'instance': {
#         'availability_zone': ['nova']
#     }
# }
VIRTUALIZATIONS = dict()
if config.has_section('virtualizations'):
    for _ in config.get('virtualizations', 'supported').split():
        virtualization = dict()
        tpe = _.strip()
        if not tpe or not config.has_section(tpe):
            continue
        for _ in config.get(tpe, 'components').split():
            component = _.strip()
            section = '%s_%s' % (tpe, component)
            if not component or not config.has_section(section):
                continue
            cfg = {
                name: [value.strip() for value in values.split() if value.strip()]
                for name, values in config.items(section)
            }
            virtualization[component] = cfg
        VIRTUALIZATIONS[tpe] = virtualization

if config.has_section('report'):
    REPORT_ZONES = config.get('report', 'zones').split()
else:
    REPORT_ZONES = []

# Flavor Filter Settings
if config.has_section('flavor_filter'):
    FLAVOR_FILTER = defaultdict(list)
    for option in config.options('flavor_filter'):
        FLAVOR_FILTER[option.upper()] = config.get('flavor_filter', option).split()
